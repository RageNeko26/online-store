// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"
	"time"
)

const createCart = `-- name: CreateCart :one
INSERT into shopping_carts (
    cart_id,
    customer_id, 
    product_id
) VALUES (
    $1, $2, $3
) RETURNING cart_id, customer_id, product_id, created_at
`

type CreateCartParams struct {
	CartID     string `json:"cart_id"`
	CustomerID string `json:"customer_id"`
	ProductID  string `json:"product_id"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, createCart, arg.CartID, arg.CustomerID, arg.ProductID)
	var i ShoppingCart
	err := row.Scan(
		&i.CartID,
		&i.CustomerID,
		&i.ProductID,
		&i.CreatedAt,
	)
	return i, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    category_name
) VALUES (
    $1
) RETURNING category_id, category_name
`

func (q *Queries) CreateCategory(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, categoryName)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    product_id,
    category_id,
    product_name,
    price
) VALUES (
    $1, $2, $3, $4
) RETURNING product_id, category_id, product_name, price, created_at
`

type CreateProductParams struct {
	ProductID   string `json:"product_id"`
	CategoryID  int64  `json:"category_id"`
	ProductName string `json:"product_name"`
	Price       int64  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ProductID,
		arg.CategoryID,
		arg.ProductName,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.CategoryID,
		&i.ProductName,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const findCart = `-- name: FindCart :many
SELECT shopping_carts.cart_id, customers.customer_name, products.product_name FROM shopping_carts
    INNER JOIN customers ON shopping_carts.customer_id=customers.customer_id
    INNER JOIN products on shopping_carts.product_id=products.product_id
    WHERE customers.customer_name=$1
`

type FindCartRow struct {
	CartID       string `json:"cart_id"`
	CustomerName string `json:"customer_name"`
	ProductName  string `json:"product_name"`
}

func (q *Queries) FindCart(ctx context.Context, customerName string) ([]FindCartRow, error) {
	rows, err := q.db.QueryContext(ctx, findCart, customerName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCartRow
	for rows.Next() {
		var i FindCartRow
		if err := rows.Scan(&i.CartID, &i.CustomerName, &i.ProductName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProductByCategory = `-- name: FindProductByCategory :many
SELECT products.product_id, categories.category_name, products.product_name, products.price, products.created_at FROM products INNER JOIN categories ON products.category_id=categories.category_id WHERE products.category_id=$1
`

type FindProductByCategoryRow struct {
	ProductID    string    `json:"product_id"`
	CategoryName string    `json:"category_name"`
	ProductName  string    `json:"product_name"`
	Price        int64     `json:"price"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) FindProductByCategory(ctx context.Context, categoryID int64) ([]FindProductByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, findProductByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindProductByCategoryRow
	for rows.Next() {
		var i FindProductByCategoryRow
		if err := rows.Scan(
			&i.ProductID,
			&i.CategoryName,
			&i.ProductName,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
