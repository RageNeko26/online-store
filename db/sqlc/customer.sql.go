// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    customer_id, 
    customer_name,
    customer_address,
    email,
    password
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING customer_id, customer_name, customer_address, email, password
`

type CreateCustomerParams struct {
	CustomerID      string `json:"customer_id"`
	CustomerName    string `json:"customer_name"`
	CustomerAddress string `json:"customer_address"`
	Email           string `json:"email"`
	Password        string `json:"password"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.CustomerID,
		arg.CustomerName,
		arg.CustomerAddress,
		arg.Email,
		arg.Password,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.CustomerAddress,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findCustomerByEmail = `-- name: FindCustomerByEmail :one
SELECT customer_id, customer_name, email, password FROM customers
WHERE email=$1
`

type FindCustomerByEmailRow struct {
	CustomerID   string `json:"customer_id"`
	CustomerName string `json:"customer_name"`
	Email        string `json:"email"`
	Password     string `json:"password"`
}

func (q *Queries) FindCustomerByEmail(ctx context.Context, email string) (FindCustomerByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findCustomerByEmail, email)
	var i FindCustomerByEmailRow
	err := row.Scan(
		&i.CustomerID,
		&i.CustomerName,
		&i.Email,
		&i.Password,
	)
	return i, err
}
